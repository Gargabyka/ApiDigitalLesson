// <auto-generated />
using System;
using ApiDigitalLesson.Migration.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ApiDigitalLesson.Migration.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20230808191841_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AspDigitalLesson.Model.Entity.AboutTeacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.ToTable("AboutTeacher");
                });

            modelBuilder.Entity("AspDigitalLesson.Model.Entity.GroupLesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsCancel")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFinish")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxQuantityStudents")
                        .HasColumnType("integer");

                    b.Property<Guid>("TeacherTypeLessonId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TeacherTypeLessonId");

                    b.ToTable("GroupLesson");
                });

            modelBuilder.Entity("AspDigitalLesson.Model.Entity.GroupLessonStudents", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StudentsId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("StudentsId");

                    b.ToTable("GroupLessonStudents");
                });

            modelBuilder.Entity("AspDigitalLesson.Model.Entity.SingleLesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsCancel")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFinish")
                        .HasColumnType("boolean");

                    b.Property<Guid>("StudentsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TeacherTypeLessonId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TypeLessonId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("StudentsId");

                    b.HasIndex("TeacherTypeLessonId");

                    b.ToTable("SingleLesson");
                });

            modelBuilder.Entity("AspDigitalLesson.Model.Entity.Students", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateBirthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telegram")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("AspDigitalLesson.Model.Entity.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateBirthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("bytea");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Telegram")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Teacher");
                });

            modelBuilder.Entity("AspDigitalLesson.Model.Entity.TeacherTypeLesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsGroup")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOffline")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSingle")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TypeLessonsId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.HasIndex("TypeLessonsId");

                    b.ToTable("TeacherTypeLesson");
                });

            modelBuilder.Entity("AspDigitalLesson.Model.Entity.TypeLessons", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Category")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("TypeLessons", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7fe64d6f-556b-45f5-846e-5fd51f117b3b"),
                            Category = 0,
                            Name = "ЕГЭ"
                        },
                        new
                        {
                            Id = new Guid("21732d98-5a9b-45d6-8ac8-9cd8eea852e6"),
                            Category = 1,
                            Name = "ОГЭ"
                        },
                        new
                        {
                            Id = new Guid("f18125d6-84ad-4584-9721-9913ffca8a97"),
                            Category = 2,
                            Name = "Технические науки"
                        },
                        new
                        {
                            Id = new Guid("00d9588d-ac9c-4e99-80da-0db29f8c0e90"),
                            Category = 3,
                            Name = "Естественные науки"
                        },
                        new
                        {
                            Id = new Guid("c51a82b4-d961-4b61-8508-f750e1eb592a"),
                            Category = 4,
                            Name = "Гуманитарные науки"
                        },
                        new
                        {
                            Id = new Guid("7521011a-53a2-4d1c-88ed-625fc2c9e038"),
                            Category = 5,
                            Name = "Программирование"
                        },
                        new
                        {
                            Id = new Guid("7ef44aff-1929-4f1a-9994-b05f3c8699b5"),
                            Category = 6,
                            Name = "Школьная программа"
                        },
                        new
                        {
                            Id = new Guid("58f69d5c-85ea-4496-aaa5-3aa41c55c89f"),
                            Category = 7,
                            Name = "Музыка"
                        },
                        new
                        {
                            Id = new Guid("d7f42acb-34ea-4bca-9d27-6bb98c4802c2"),
                            Category = 8,
                            Name = "Искусство"
                        },
                        new
                        {
                            Id = new Guid("e8f93937-7210-4dba-badc-8ba1e3ba7cb0"),
                            Name = "Математика (базовый уровень)",
                            ParentId = new Guid("7fe64d6f-556b-45f5-846e-5fd51f117b3b")
                        },
                        new
                        {
                            Id = new Guid("d1dad1bc-20d5-47c8-b576-0512e9efa87f"),
                            Name = "Математика (профильный уровень)",
                            ParentId = new Guid("7fe64d6f-556b-45f5-846e-5fd51f117b3b")
                        },
                        new
                        {
                            Id = new Guid("ed8b6ede-894c-4eb4-ab4c-2459dcafe8f7"),
                            Name = "Русский язык",
                            ParentId = new Guid("7fe64d6f-556b-45f5-846e-5fd51f117b3b")
                        },
                        new
                        {
                            Id = new Guid("1ef7e62a-6197-401f-9280-c2678234fd94"),
                            Name = "Литература",
                            ParentId = new Guid("7fe64d6f-556b-45f5-846e-5fd51f117b3b")
                        },
                        new
                        {
                            Id = new Guid("20850d2d-4486-4dda-8489-c664818c4525"),
                            Name = "Физика",
                            ParentId = new Guid("7fe64d6f-556b-45f5-846e-5fd51f117b3b")
                        },
                        new
                        {
                            Id = new Guid("72a93f00-b5b4-4eb1-bf98-cc73dad10345"),
                            Name = "Химия",
                            ParentId = new Guid("7fe64d6f-556b-45f5-846e-5fd51f117b3b")
                        },
                        new
                        {
                            Id = new Guid("0be6c1fc-f3e0-45c2-a2bb-e1ad7febc574"),
                            Name = "История",
                            ParentId = new Guid("7fe64d6f-556b-45f5-846e-5fd51f117b3b")
                        },
                        new
                        {
                            Id = new Guid("d8cf60a7-21df-4ed9-9608-5e2a324c2d85"),
                            Name = "Обществознание",
                            ParentId = new Guid("7fe64d6f-556b-45f5-846e-5fd51f117b3b")
                        },
                        new
                        {
                            Id = new Guid("f7fbd719-690d-4805-a8c0-fa5f1183173b"),
                            Name = "Информатика",
                            ParentId = new Guid("7fe64d6f-556b-45f5-846e-5fd51f117b3b")
                        },
                        new
                        {
                            Id = new Guid("a0a061c4-6c33-479c-8e9b-1bcb32cc7de8"),
                            Name = "Биология",
                            ParentId = new Guid("7fe64d6f-556b-45f5-846e-5fd51f117b3b")
                        },
                        new
                        {
                            Id = new Guid("b93e2c77-5faa-4031-9c11-a41819594845"),
                            Name = "География",
                            ParentId = new Guid("7fe64d6f-556b-45f5-846e-5fd51f117b3b")
                        },
                        new
                        {
                            Id = new Guid("e4203c90-1397-40cd-94c6-ecf6602d96e4"),
                            Name = "Английский язык",
                            ParentId = new Guid("7fe64d6f-556b-45f5-846e-5fd51f117b3b")
                        },
                        new
                        {
                            Id = new Guid("e1d729d8-eec3-41b6-8a93-632c484d2e68"),
                            Name = "Немецкий язык",
                            ParentId = new Guid("7fe64d6f-556b-45f5-846e-5fd51f117b3b")
                        },
                        new
                        {
                            Id = new Guid("b40245ab-6803-4436-822b-8cf4053e7c7c"),
                            Name = "Французский язык",
                            ParentId = new Guid("7fe64d6f-556b-45f5-846e-5fd51f117b3b")
                        },
                        new
                        {
                            Id = new Guid("631e9573-5b58-4402-80f7-11b4c0220f6c"),
                            Name = "Китайский язык",
                            ParentId = new Guid("7fe64d6f-556b-45f5-846e-5fd51f117b3b")
                        },
                        new
                        {
                            Id = new Guid("61e44645-ed80-4e7f-b005-c290ec2f4110"),
                            Name = "Испанский язык",
                            ParentId = new Guid("7fe64d6f-556b-45f5-846e-5fd51f117b3b")
                        },
                        new
                        {
                            Id = new Guid("34fb6a90-b2da-4a79-b397-10b0d73b445c"),
                            Name = "География",
                            ParentId = new Guid("7fe64d6f-556b-45f5-846e-5fd51f117b3b")
                        },
                        new
                        {
                            Id = new Guid("dafb304e-d531-4292-8884-3d523fcfdb6a"),
                            Name = "Математика",
                            ParentId = new Guid("21732d98-5a9b-45d6-8ac8-9cd8eea852e6")
                        },
                        new
                        {
                            Id = new Guid("49d0413e-1067-4b87-9e60-b5404ee8eee2"),
                            Name = "Русский язык",
                            ParentId = new Guid("21732d98-5a9b-45d6-8ac8-9cd8eea852e6")
                        },
                        new
                        {
                            Id = new Guid("9060609d-65fa-4849-bda5-b166c6527238"),
                            Name = "Литература",
                            ParentId = new Guid("21732d98-5a9b-45d6-8ac8-9cd8eea852e6")
                        },
                        new
                        {
                            Id = new Guid("9095ec51-8fbb-45ad-b09e-5a30fccd2c51"),
                            Name = "Физика",
                            ParentId = new Guid("21732d98-5a9b-45d6-8ac8-9cd8eea852e6")
                        },
                        new
                        {
                            Id = new Guid("f5f754d7-d3f2-4db9-9ad4-670dad44af84"),
                            Name = "Химия",
                            ParentId = new Guid("21732d98-5a9b-45d6-8ac8-9cd8eea852e6")
                        },
                        new
                        {
                            Id = new Guid("0dc22604-d501-4066-9e76-bff2333183d6"),
                            Name = "История",
                            ParentId = new Guid("21732d98-5a9b-45d6-8ac8-9cd8eea852e6")
                        },
                        new
                        {
                            Id = new Guid("b545038d-d16b-4364-bace-65bbbcfc0deb"),
                            Name = "Обществознание",
                            ParentId = new Guid("21732d98-5a9b-45d6-8ac8-9cd8eea852e6")
                        },
                        new
                        {
                            Id = new Guid("fa52b414-1df0-407c-8dfc-a1d0dca9647a"),
                            Name = "Информатика",
                            ParentId = new Guid("21732d98-5a9b-45d6-8ac8-9cd8eea852e6")
                        },
                        new
                        {
                            Id = new Guid("07fbd819-0543-4881-a962-8f4e30ab956a"),
                            Name = "Биология",
                            ParentId = new Guid("21732d98-5a9b-45d6-8ac8-9cd8eea852e6")
                        },
                        new
                        {
                            Id = new Guid("6e69d1db-37ea-4a9a-9a27-fd9931ebf9e3"),
                            Name = "География",
                            ParentId = new Guid("21732d98-5a9b-45d6-8ac8-9cd8eea852e6")
                        },
                        new
                        {
                            Id = new Guid("2eadd22c-a0fd-4f39-ab47-b3fab5f835d5"),
                            Name = "Английский язык",
                            ParentId = new Guid("21732d98-5a9b-45d6-8ac8-9cd8eea852e6")
                        },
                        new
                        {
                            Id = new Guid("d23edcd5-5897-4f64-b6d3-86a400d84b5d"),
                            Name = "Немецкий язык",
                            ParentId = new Guid("21732d98-5a9b-45d6-8ac8-9cd8eea852e6")
                        },
                        new
                        {
                            Id = new Guid("cc5ec599-f42a-4ce2-a990-5525d01d4aee"),
                            Name = "Французский язык",
                            ParentId = new Guid("21732d98-5a9b-45d6-8ac8-9cd8eea852e6")
                        },
                        new
                        {
                            Id = new Guid("258d4f34-a58c-42ab-aa95-d60146f22989"),
                            Name = "Китайский язык",
                            ParentId = new Guid("21732d98-5a9b-45d6-8ac8-9cd8eea852e6")
                        },
                        new
                        {
                            Id = new Guid("d0888e04-1f93-4af2-88e7-976207f5fe5e"),
                            Name = "Испанский язык",
                            ParentId = new Guid("21732d98-5a9b-45d6-8ac8-9cd8eea852e6")
                        },
                        new
                        {
                            Id = new Guid("c0e822b6-6cf8-4e1c-9c12-8ba8a4e1eda7"),
                            Name = "География",
                            ParentId = new Guid("21732d98-5a9b-45d6-8ac8-9cd8eea852e6")
                        });
                });

            modelBuilder.Entity("AspDigitalLesson.Model.Entity.AboutTeacher", b =>
                {
                    b.HasOne("AspDigitalLesson.Model.Entity.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("AspDigitalLesson.Model.Entity.GroupLesson", b =>
                {
                    b.HasOne("AspDigitalLesson.Model.Entity.TeacherTypeLesson", "TeacherTypeLesson")
                        .WithMany()
                        .HasForeignKey("TeacherTypeLessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TeacherTypeLesson");
                });

            modelBuilder.Entity("AspDigitalLesson.Model.Entity.GroupLessonStudents", b =>
                {
                    b.HasOne("AspDigitalLesson.Model.Entity.GroupLesson", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AspDigitalLesson.Model.Entity.Students", "Students")
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("AspDigitalLesson.Model.Entity.SingleLesson", b =>
                {
                    b.HasOne("AspDigitalLesson.Model.Entity.Students", "Students")
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AspDigitalLesson.Model.Entity.TeacherTypeLesson", "TeacherTypeLesson")
                        .WithMany()
                        .HasForeignKey("TeacherTypeLessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Students");

                    b.Navigation("TeacherTypeLesson");
                });

            modelBuilder.Entity("AspDigitalLesson.Model.Entity.TeacherTypeLesson", b =>
                {
                    b.HasOne("AspDigitalLesson.Model.Entity.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AspDigitalLesson.Model.Entity.TypeLessons", "TypeLessons")
                        .WithMany()
                        .HasForeignKey("TypeLessonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");

                    b.Navigation("TypeLessons");
                });

            modelBuilder.Entity("AspDigitalLesson.Model.Entity.TypeLessons", b =>
                {
                    b.HasOne("AspDigitalLesson.Model.Entity.TypeLessons", "Parent")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("AspDigitalLesson.Model.Entity.TypeLessons", b =>
                {
                    b.Navigation("SubCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
